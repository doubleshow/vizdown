FCQ Data Analysis for 2014
==========================
First, we will load the data:
```
var data = loader.json('examples/fcq/fcq.2014.json', {multiLines: true})
var fields = _.keys(data[0]).join(', ')
```
#Questions of the FCQ Data

##What is the relationship between total students taught and instructor types?
```
viz.table(correlationship(data,
  {x: 'insttl1', x_label: "Instructor Type",
   y: 'N_ENROLL', y_label: "Total Number Enrolled",
   op: 'sum', sort: 'Total Number Enrolled'
  }))
```


##What is the correlation between average course rating and work load hours?
```
var rating_x_workload = correlationship(data,
  {x: 'Workload_Hrs_Wk', x_label: "Hours Per Week",
   y: 'AvgCourse', y_label: "Average Course Rating",
   op: 'average', sort: 'Hours Per Week', sortType: 'num'
  })

var heights=[]
var labels= []
rating_x_workload.forEach(function(data){
  heights.push(data['Average Course Rating'])
  labels.push(data['Hours Per Week'])
})
viz.barchart(heights, {labels:labels})
```

##What is the relationship between grades and instructor types?
```
viz.table(correlationship(data,
  {x: 'insttl1', x_label: "Instructor Type",
   y: 'AVG_GRD', y_label: "Average Grade",
   op: 'average', sort: "Instructor Type"
  }))
```

##What is the correlation between course number (levels) and grades?
```
viz.table(correlationship(data,
  {x: 'CrsLvlNum', x_label: "Course Level",
   y: 'AVG_GRD', y_label: "Average Grade",
   op: 'average', sort: "Course Level"
  }))
```


##What is the average grade given by each department?
```
viz.table(correlationship(data,
  {x: 'CrsPBADept', x_label: "Department",
   y: 'AVG_GRD', y_label: "Average Grade",
   op: 'average', sort: "Department", reverse: false
  }))
```

##What is the correlation between course rating and grades?
```
//This one will be interesting -- some type of aggregation will be required to make it 'meaningful'
console.log('unimplemented')
```

##What is the distribution of different instructor types?
```
var instructors_type_sums = correlationship(data,
  {x: 'insttl1', x_label: "Instructor Type",
   y: 'N_ENROLL', y_label: "Total Number Enrolled",
   op: 'sum', sort: 'Total Number Enrolled', reverse: true
  })

var instructor_types = ['INSTRUCTOR', 'PROFESSOR', 'LECTURER', 'ASSOCIATE PROFESSOR',
  'ASST PROFESSOR', 'SENIOR INSTRUCTOR', 'GRAD PART-TIME INSTRUCTOR', 'TEACHING ASSISTANT',
  'PROFESSIONAL RESEARCH ASST','INSTRUCTOR ADJUNCT','RESEARCH ASSOCIATE']

var heights=[]
var labels= []
instructors_type_sums.forEach(function(data){
  if (instructor_types.indexOf(data['Instructor Type']) > 0){
    heights.push(data['Total Number Enrolled'])
    labels.push(data['Instructor Type'])
  }
})
viz.barchart(heights, {labels:labels})

```


##Create a Linechart to show the average course rating of all courses over 2009 - 2014.
```
console.log('unimplemented')
```

##Create a barchart to show the total number of students taught by instructors?
```
console.log('unimplemented')
```

##Create a scatterplot to show the relationship between average course rating and number of students enrolled
```
var students_v_grade = correlationship(data,
  {x: 'N_ENROLL', x_label: "Number Enrolled",
   y: 'AvgCourse', y_label: "Average Course Rating",
   op: 'average', sort: 'Number Enrolled', reverse: false
  })

to_scatter = _.map(students_v_grade, function(data){
  if (!isNaN(parseFloat(data['Average Course Rating']))){
    return [parseInt(data['Number Enrolled']), 20*parseFloat(data['Average Course Rating'])]
  }
})

viz.scatterplot(_.compact(to_scatter), {})
```
